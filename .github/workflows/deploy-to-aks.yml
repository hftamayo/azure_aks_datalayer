name: Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check Azure CLI version
      run: az --version        

    - name: Install kubelogin
      run: |
        az aks install-cli

    - name: Assign Log Analytics Contributor Role
      run: |
        SP_ID=$(az ad sp list --display-name pgdbmssp --query "[].appId" -o tsv)
        az role assignment create --assignee $SP_ID --role "Log Analytics Contributor" --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/pgdbmsgroup        

    - name: Create Log Analytics Workspace
      run: |
        az monitor log-analytics workspace create --resource-group pgdbmsgroup --workspace-name pgdbmsWorkspace --location westus
  
    - name: Wait for Log Analytics Workspace to be ready
      run: |
        echo "Waiting for Log Analytics Workspace to be ready..."
        for i in {1..10}; do
          WORKSPACE_STATUS=$(az monitor log-analytics workspace show --resource-group pgdbmsgroup --workspace-name pgdbmsWorkspace --query "provisioningState" -o tsv)
          if [ "$WORKSPACE_STATUS" == "Succeeded" ]; then
            echo "Log Analytics Workspace is ready."
            break
          fi
          echo "Log Analytics Workspace is not ready yet. Waiting..."
          sleep 30
        done

    - name: Create AKS Cluster
      run: |
        if az aks show --resource-group pgdbmsgroup --name pgdbmscluster > /dev/null 2>&1; then
          echo "AKS Cluster already exists. Skipping creation."
        else
          az aks create --resource-group pgdbmsgroup --name pgdbmscluster --node-count 1 --enable-addons monitoring --workspace-resource-id $(az monitor log-analytics workspace show --resource-group pgdbmsgroup --workspace-name pgdbmsWorkspace --query id -o tsv) --generate-ssh-keys --location westus --node-vm-size "Standard_B2s"
        fi

    - name: Wait for AKS Cluster to be ready
      run: |
        echo "Waiting for AKS Cluster to be ready..."
        for i in {1..20}; do
          CLUSTER_STATUS=$(az aks show --resource-group pgdbmsgroup --name pgdbmscluster --query "provisioningState" -o tsv)
          if [ "$CLUSTER_STATUS" == "Succeeded" ]; then
            echo "AKS Cluster is ready."
            break
          fi
          echo "AKS Cluster is not ready yet. Waiting..."
          sleep 30
        done

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group pgdbmsgroup --name pgdbmscluster --admin

    - name: Set AKS Context
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        resource-group: pgdbmsgroup
        cluster-name: pgdbmscluster

    - name: Configure kubelogin
      run: |
        kubelogin convert-kubeconfig -l azurecli

    - name: Verify Kubernetes Context
      run: |
        kubectl config current-context

    - name: Print Kubernetes Configuration
      run: |
        kubectl config view

    - name: Create Docker Hub Secret
      run: |
        if kubectl get secret regcred > /dev/null 2>&1; then
          echo "Docker Hub Secret already exists. Skipping creation."
        else
          kubectl create secret docker-registry regcred \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_HUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_HUB_PAT }} \
            --docker-email=${{ secrets.DOCKER_HUB_EMAIL }}
        fi

    - name: Create PostgreSQL Credentials Secret
      run: |
        if kubectl get secret pg-credentials > /dev/null 2>&1; then
          echo "PostgreSQL Credentials Secret already exists. Skipping creation."
        else
          kubectl create secret generic pg-credentials --from-literal=POSTGRES_DB=ecomdev --from-literal=POSTGRES_USER=laserants --from-literal=POSTGRES_PASSWORD=ants
        fi        

    - name: Create Persistent Volume Claim
      run: |
        if kubectl get pvc pgdata-pvc > /dev/null 2>&1; then
          echo "Persistent Volume Claim already exists. Skipping creation."
        else
          kubectl apply -f pg_pvc.yml
        fi

    - name: Login to Docker Hub
      run: |
        echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

    - name: Pull Docker image
      run: |
        docker pull hftamayo/pgecommerce:0.0.1

    - name: Deploy to AKS
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          pg_deployment.yml
          pg_service.yml
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    - name: Wait for Deployment Rollout
      run: |
        kubectl rollout status deployment/pgdatalayer --timeout=10m

    - name: List Deployments
      run: |
        kubectl get deployments

    - name: Describe Deployment
      run: |
        kubectl describe deployment pgdatalayer

    - name: Get Pod Logs
      run: |
        kubectl logs -l app=pgdatalayer